import asyncio
import logging
import re
from datetime import datetime, timedelta
from logging.config import fileConfig

from aiogram import types, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import users as udb
from cb_data import CallbackTopRace, CallbackGuildRace, CallbackGuildList
from misc import bot

fileConfig('logging.ini', disable_existing_loggers=False)
log = logging.getLogger(__name__)
router = Router()


@router.message(F.chat.type == 'private', Command(commands="start"))
async def cmd_start(message: types.Message):
    mc = message.chat
    # id, user_id, username, first_name, last_name, middle_name
    us = udb.get_user_by_user_id(mc.id)
    if us is None:
        log.info(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mc.username or ""} (id:{mc.id})')
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ö–æ—Ç—è –Ω–µ –∑–Ω–∞—é —á–µ–º —Å–º–æ–≥—É –ø–æ–º–æ—á—å ü•≤")
        return
    if mc.username is not None:
        db.update_users_tg_username(us[0], mc.username)
    if us[5] != 'ü§ñ':
        log.warning(f'–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∏–≥—Ä–æ–∫–æ–º {us[5]}{us[3]}: @{mc.username} (id:{mc.id})')
        await message.answer("–ó–∞–ø—Ä–æ—Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–π —Ä–∞—Å—ã!\r\n–ñ–¥–µ–º –≤–∞—Å –≤ –ê–∫–∫—Ä–µ—Ç–∏–∏")
        return
    if us[12] == 0:
        pass
    log.info(f'–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ {us[5]}{us[3]}: @{mc.username} (id:{mc.id})')
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {us[3]}')


@router.message(F.chat.type == 'private', Command(commands=['help']))
async def cmd_help(message: types.Message):
    txt = """
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stat –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —Å–∏–ª—å–Ω–æ —É–º–Ω—ã–π, –±–æ–ª–µ–µ –Ω–∏—á–µ–≥–æ –µ—â–µ –Ω–µ —É–º–µ–µ—Ç, —É–≤—ã.
"""
    mc = message.chat
    log.info(f'–í—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{mc.username} id:{mc.id}')
    await message.answer(txt)


@router.message(F.chat.type == 'private', Command(commands=['top']))
async def cmd_top_cw_activity(message: types.Message):
    log.info('top command')
    mgc = message.get_current()
    mc = message.chat
    mu = message.from_user

    # id, user_id, username, name, guild_id, race, lvl, action_dt, cw_dt, castle_dt, activity, lamp
    us = db.get_from_users_by_user_id(mc.id)
    if us is None:
        log.warning(f'–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–æ–ø–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {mc.username} (id:{mc.id})')
        await message.answer("–ö–∞–∂–µ—Ç—Å—è —è –≤–∞—Å –Ω–µ –∑–Ω–∞—é!\r\n–°–æ–≤–µ—Ä—à–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞–∂–∞–µ–º–æ–µ –≤ rf_actions –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ "
                             "–ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–º.\r\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    if mc.username is not None:
        if us[2] != mc.username:
            db.update_users_tg_username(us[0], mc.username)
    if us[5] != 'ü§ñ':
        log.warning(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ —Ç–æ–ø–∞–º –∏–≥—Ä–æ–∫–æ–º {us[5]}{us[3]}: @{mc.username} (id:{mc.id})')
        await message.answer("–ó–∞–ø—Ä–æ—Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–π —Ä–∞—Å—ã!")
        return
    if us[6] <= 53 and us[12] == 0:  # TODO: –ö–æ—Å—Ç—ã–ª—å –¥–ª—è —á–≤-–≤–æ–¥–æ–≤, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ –ø–æ–ª—é —Ä–µ–≥–∏—Å—Ç–µ—Ä–µ–¥ = 1
        log.warning(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≥–∏–ª—å–¥–∏—è–º –∏–≥—Ä–æ–∫–æ–º {us[6]} —É—Ä–æ–≤–Ω—è {us[5]}{us[3]}: @{mc.username} (id:{mc.id})')
        await message.answer("–ó–∞–ø—Ä–æ—Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è!")
        return
    rcs = db.get_guild_races()
    rc = ['üë©‚ÄçüöÄ', 'üßù‚Äç‚ôÄ', 'ü§ñ']
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=rc[0], callback_data=CallbackTopRace(race=rc[0]))
    keyboard.button(text=rc[1], callback_data=CallbackTopRace(race=rc[1]))
    keyboard.button(text=rc[2], callback_data=CallbackTopRace(race=rc[2]))
    keyboard.adjust(3)
    log.debug(rcs)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É", reply_markup=keyboard.as_markup())


@router.callback_query(CallbackTopRace.filter())
async def callbacks_get_top_race_user_list(call: types.CallbackQuery, callback_data: CallbackTopRace):
    race = callback_data.race
    dt_now = datetime.utcnow()
    msk_td = timedelta(hours=3)
    week_td = timedelta(days=7)
    date_of_period = dt_now + msk_td - week_td
    low_bound = 7
    # race, lamp, guild_name, name, lvl, battle_count, wins, looses
    user_list = db.get_top_wariors_last_week_by_race(race, date_of_period, low_bound)
    if len(user_list) == 0:
        await call.message.edit_text(f'¬Ø\\_(„ÉÑ)_/¬Ø\r\n–ù—É–ª–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞—Å–µ {race}')
        await call.answer("¬Ø\\_(„ÉÑ)_/¬Ø")
    else:
        text = f'–¢–æ–ø —Ä–∞—Å—ã {race} \r\n'
        users_text = ''
        i: int = 1
        top_kills = 0
        top_deaths = 0
        for usr in user_list:
            gi = "[" + usr[2] + "]" or ""
            users_text += f'{i:02}) üèÖ{usr[4]} {usr[1] or ""} {gi}{usr[3]}: üåã {usr[5]} ‚öîÔ∏è {usr[6]} ‚ò†Ô∏è {usr[7]}\r\n'
            i += 1
            top_kills += usr[6]
            top_deaths += usr[7]
            if i > 30:
                break
        text += f'‚öîÔ∏è {top_kills} ‚ò†Ô∏è {top_deaths}\r\n\r\n'
        text += users_text
        log.info(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{call.message.chat.username} –ø–æ —Ä–∞—Å–µ {race}:\r\n{text}')
        await call.message.edit_text(f'{text}')
        await call.answer()


async def is_user_allowed(message: types.Message):
    mc = message.chat
    # id, user_id, username, name, guild_id, race, lvl, action_dt, cw_dt, castle_dt, activity, lamp, registered
    us = db.get_from_users_by_user_id(mc.id)
    if us is None:
        log.warning(f'–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≥–∏–ª—å–¥–∏—è–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {mc.username} (id:{mc.id})')
        await message.answer("–ö–∞–∂–µ—Ç—Å—è —è –≤–∞—Å –Ω–µ –∑–Ω–∞—é!\r\n–°–æ–≤–µ—Ä—à–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞–∂–∞–µ–º–æ–µ –≤ rf_actions –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ "
                             "–ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–º.\r\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return False
    if mc.username is not None:
        if us[2] != mc.username:
            db.update_users_tg_username(us[0], mc.username)
    if us[5] != 'ü§ñ':
        log.warning(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≥–∏–ª—å–¥–∏—è–º –∏–≥—Ä–æ–∫–æ–º {us[5]}{us[3]}: @{mc.username} (id:{mc.id})')
        await message.answer("–ó–∞–ø—Ä–æ—Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–π —Ä–∞—Å—ã!")
        return False
    if us[6] <= 53 and us[12] == 0:  # TODO: –ö–æ—Å—Ç—ã–ª—å –¥–ª—è —á–≤-–≤–æ–¥–æ–≤, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ –ø–æ–ª—é —Ä–µ–≥–∏—Å—Ç–µ—Ä–µ–¥ = 1
        log.warning(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≥–∏–ª—å–¥–∏—è–º –∏–≥—Ä–æ–∫–æ–º {us[6]} —É—Ä–æ–≤–Ω—è {us[5]}{us[3]}: @{mc.username} (id:{mc.id})')
        await message.answer("–ó–∞–ø—Ä–æ—Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è!")
        return False
    return True


@router.message(F.chat.type == 'private', Command(commands=['warriors']))
async def cmd_warriors(message: types.Message, command: CommandObject):
    log.info('warriors command')
    log.info(command.args)
    gi_warriors_args = command.args
    is_allow = await is_user_allowed(message)
    if not is_allow:
        return
    elif gi_warriors_args is None:
        await select_warriors_race(message)
    elif ' ' in gi_warriors_args:
        await select_warriors_gi_date(message, gi_warriors_args)
    else:
        await select_warriors_gi(message, gi_warriors_args)


async def select_warriors_race(message: types.Message):
    rcs = db.get_guild_races()
    rc = ['üë©‚ÄçüöÄ', 'üßù‚Äç‚ôÄ', 'ü§ñ']
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=rc[0], callback_data=CallbackGuildRace(race=rc[0]))
    keyboard.button(text=rc[1], callback_data=CallbackGuildRace(race=rc[1]))
    keyboard.button(text=rc[2], callback_data=CallbackGuildRace(race=rc[2]))
    keyboard.adjust(3)
    log.debug(rcs)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –≥–∏–ª—å–¥–∏–∏", reply_markup=keyboard.as_markup())


async def select_warriors_gi(message: types.Message, gi: str):
    days = 7
    texts = await warriors_gi_date(message, gi, days)
    for text in texts:
        await message.answer(text)
    log.info(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.chat.username} –ø–æ –≥–∏–ª—å–¥–∏–∏ {gi}:\r\n{texts}')


async def select_warriors_gi_date(message: types.Message, arg_string: str):
    pattern_gi_date = re.compile(r'(.*?) (\d+)')
    res = re.search(pattern_gi_date, arg_string)
    if res is None:
        await message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞')
        return
    gi = res.group(1)
    days = int(res.group(2))
    texts = await warriors_gi_date(message, gi, days)
    for text in texts:
        await message.answer(text)
        log.info(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.chat.username} –ø–æ –≥–∏–ª—å–¥–∏–∏ {gi}:\r\n{text}')


async def warriors_gi_date(message: types.Message, gi, days):
    gi_id = []
    # guild_id, guild_name, race
    guilds = db.get_guild_by_name(gi)
    if len(guilds) != 0:
        gi_id.append(guilds[0])
    else:
        # guild_id, guild_name, race
        guilds = db.get_guild_by_lower_name(gi)
        if len(guilds) != 0:
            gi_id.append(guilds[0])
        else:
            guilds = db.get_guilds_by_instr_name(gi)
            if len(guilds) != 0:
                for g in guilds:
                    gi_id.append(g[0])
    if len(gi_id) == 0:
        await message.answer('¬Ø\\_(„ÉÑ)_/¬Ø\r\n–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return []
    dt_now = datetime.utcnow()
    msk_td = timedelta(hours=3)
    custom_td = timedelta(days=days)
    date_of_period = dt_now + msk_td - custom_td
    texts = []
    for guild_id in gi_id:
        user_list = db.get_cw_warriors_by_guild_id_and_date_of(guild_id, date_of_period)
        text = await gi_users2text_message(guild_id, user_list)
        texts.append(text)
    return texts


async def gi_users2text_message(guild_id, user_list: list):
    guild_name = db.get_guild_name_by_id(guild_id)
    if len(user_list) == 0:
        return f'¬Ø\\_(„ÉÑ)_/¬Ø\r\n–ù—É–ª–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≥–∏–ª—å–¥–∏–∏ {guild_name}'
    usl = user_list[0]
    text = f'{usl[0]}{guild_name} \r\nüèÖ'
    users_text = '\r\n\r\n'
    i: int = 1
    users = {}
    for usr in user_list:
        users_text += f'{i}) üèÖ{usr[3]} {usr[1]}{usr[2]}: üåã {usr[4]} ‚öîÔ∏è {usr[5]} ‚ò†Ô∏è {usr[6]}\r\n'
        i += 1
        if usr[3] not in users.keys():
            users[usr[3]] = 0
        users[usr[3]] = users.get(usr[3]) + 1
    for k in users.keys():
        text += f'{k}x{users.get(k)} '
    text += users_text
    return text


@router.callback_query(CallbackGuildRace.filter())
async def callbacks_guild_list_by_race(call: types.CallbackQuery, callback_data: CallbackGuildRace):
    # user_value = user_data.get(call.from_user.id, 0)
    race = callback_data.race
    guild_list = db.get_guilds_by_race(race)
    keyboard = InlineKeyboardBuilder()
    for g in guild_list:
        keyboard.button(text=g[1], callback_data=CallbackGuildList(guild_id=g[0], guild_name=g[1]))

    keyboard.adjust(3)
    log.info(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{call.message.chat.username} –ø–æ —Ä–∞—Å–µ {race}')
    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–∏–ª—å–¥–∏—é {race}", reply_markup=keyboard.as_markup())
    await call.answer()


@router.callback_query(CallbackGuildList.filter())
async def callbacks_get_guild_user_list(call: types.CallbackQuery, callback_data: CallbackGuildList):
    guild_id = callback_data.guild_id
    guild_name = callback_data.guild_name
    # db = qmap.get_db()
    # db = rf_db_si.Singleton()
    dt_now = datetime.utcnow()
    msk_td = timedelta(hours=3)
    week_td = timedelta(days=7)
    date_of_period = dt_now + msk_td - week_td
    # race, lamp, name, lvl, battle_count, wins, looses
    user_list = db.get_cw_warriors_by_guild_id_and_date_of(guild_id, date_of_period)
    text = await gi_users2text_message(guild_id, user_list)
    log.info(f'–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{call.message.chat.username} –ø–æ –≥–∏–ª—å–¥–∏–∏ {guild_name}:\r\n{text}')
    await call.message.edit_text(f'{text}')
    await call.answer()


